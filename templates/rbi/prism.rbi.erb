
module Prism
  <%- nodes.each do |node| -%>
  <%- node.each_comment_line do |line| -%>
  #<%= line %>
  <%- end -%>
  class <%= node.name -%> < Node
    <%- node.fields.each do |field| -%>
    sig { returns(<%= field.rbi_class %>) }
    attr_reader :<%= field.name %>

    <%- end -%>
    sig { params(<%= (node.fields.map { |field| "#{field.name}: #{field.rbi_class}" } + ["location: Location"]).join(", ") %>).void }
    def initialize(<%= (node.fields.map(&:name) + ["location"]).join(", ") %>); end

    sig { params(visitor: Visitor).void }
    def accept(visitor); end
    <%- if node.newline == false -%>

    def set_newline_flag(newline_marked); end
    <%- elsif node.newline.is_a?(String) -%>

    def set_newline_flag(newline_marked); end
    <%- end -%>

    sig { returns(T::Array[T.nilable(Node)]) }
    def child_nodes; end

    sig { returns(T::Array[T.nilable(Node)]) }
    def deconstruct; end

    sig { params(params: T.untyped).returns(<%= node.name %>) }
    def copy(**params); end

    sig { params(keys: T::Array[Symbol]).returns(T::Hash[Symbol, T.nilable(T.any(Node, T::Array[Node], String, Token, T::Array[Token], Location))]) }
    def deconstruct_keys(keys); end
    <%- node.fields.each do |field| -%>
    <%- case field -%>
    <%- when Prism::LocationField -%>
    <%- raise unless field.name.end_with?("_loc") -%>
    <%- next if node.fields.any? { |other| other.name == field.name.delete_suffix("_loc") } -%>

    sig { returns(String) }
    def <%= field.name.delete_suffix("_loc") %>; end
    <%- when Prism::OptionalLocationField -%>
    <%- raise unless field.name.end_with?("_loc") -%>
    <%- next if node.fields.any? { |other| other.name == field.name.delete_suffix("_loc") } -%>

    sig { returns(T.nilable(String)) }
    def <%= field.name.delete_suffix("_loc") %>; end
    <%- when Prism::FlagsField -%>
    <%- flags.find { |flag| flag.name == field.kind }.tap { |flag| raise "Expected to find #{field.kind}" unless flag }.values.each do |value| -%>

    sig { returns(T::Boolean) }
    def <%= value.name.downcase %>?; end
    <%- end -%>
    <%- end -%>
    <%- end -%>

    sig { params(inspector: NodeInspector).returns(String) }
    def inspect(inspector); end
  end

  <%- end -%>

  <%- flags.each do |flag| -%>
  # <%= flag.comment %>
  module <%= flag.name %>
    <%- flag.values.each_with_index do |value, index| -%>
    # <%= value.comment %>
    <%= value.name %> = T.let(1 << <%= index %>, Integer)
    <%- end -%>
  end

  <%- end -%>

  class Visitor < BasicVisitor
    <%- nodes.each do |node| -%>
    # Visit a <%= node.name %> node
    sig { params(node: <%= node.name %>).void }
    def visit_<%= node.human %>(node); end
    <%= "\n" if node != nodes.last -%>
    <%- end -%>
  end

  module DSL
    private

    # Create a new Location object
    sig { params(source: T.nilable(Source), start_offset: Integer, length: Integer).returns(Location) }
    def Location(source, start_offset, length); end

    <%- nodes.each do |node| -%>
    # Create a new <%= node.name %> node
    sig { params(<%= (node.fields.map { |field| "#{field.name}: #{field.rbi_class}" } + ["location: Location"]).join(", ") %>).returns(<%= node.name %>) }
    def <%= node.name %>(<%= (node.fields.map(&:name) + ["location"]).join(", ") %>); end
    <%- end -%>
  end
end
