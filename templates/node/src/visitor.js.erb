// A class that knows how to walk down the tree. None of the individual visit
// methods are implemented on this visitor, so it forces the consumer to
// implement each one that they need. For a default implementation that
// continues walking the tree, see the Visitor class.
export class BasicVisitor {
  visit(node) {
    node?.accept(this);
  }

  visitAll(nodes) {
    nodes.forEach((node) => {
      node?.accept(this);
    });
  }

  visitChildNodes(node) {
    node.compactChildNodes.forEach((childNode) => {
      childNode.accept(this);
    });
  }
}

// A visitor is a class that provides a default implementation for every accept
// method defined on the nodes. This means it can walk a tree without the
// caller needing to define any special handling. This allows you to handle a
// subset of the tree, while still walking the whole tree.
//
// For example, to find all of the method calls that call the `foo` method, you
// could write:
//
// class FooCalls extends Visitor {
//   visit_call_node(node) {
//     if (node.name === "foo") {
//       // Do something with the node
//     }
//
//     // Call super so that the visitor continues walking the tree
//     super.visit_call_node(node);
//   }
// }
export class Visitor extends BasicVisitor {
<%- nodes.each_with_index do |node, index| -%>
<% # TODO: camelize method names %>
<%= "\n" if index != 0 -%>
  // Visit a <%= node.name %> node
  visit_<%= node.human %>(node) {
    this.visitChildNodes(node);
  }
<%- end -%>
}
